#+LaTeX_CLASS: beamer
#+LaTeX_HEADER: \mode<presentation>
#+LaTeX_HEADER: \usetheme{CambridgeUS}
#+LaTeX_HEADER: \usecolortheme{beaver}
#+LaTeX_HEADER: \setbeameroption{show notes}
#+LaTeX_HEADER: \institute{FOSS.IN/2009}
#+TITLE: Haskell Internals
#+AUTHOR: Ramkumar Ramachandra
#+DATE: 01 December 2009

#+BEGIN_LaTeX
\def\newblock{\hskip .11em plus .33em minus .07em} % Hack to make BibTeX work with LaTeX
\newcommand{\hl}[1 ]{\colorbox{lightgray}{#1}} % New command: hl to highlight text
#+END_LaTeX

* A Gentle Introduction
** Why Haskell? What's in it for me?
#+BEGIN_LaTeX
\begin{columns}
\begin{column}{2cm}
\includegraphics[scale=0.1]{res/haskell-logo.png}
\end{column}
\begin{column}[c]{8cm}
\begin{itemize}
\item Theoretical interest
\item Ideas to apply in other places
\item Real-world applications
\item Concurrency: STM
\end{itemize}
\end{column}
\end{columns}
#+END_LaTeX
\note[itemize]{
\item L4::Pistachio microkernel
\item "Learning Haskell ruins you as a programmer"
\item New ways of thinking
\item Highly math-oriented applications
\item Free applications: Leksah, Darcs, Pugs, Xmonad
\item Industry: ABN Amro, Credit Suisse, Deutsche Bank, Barclays, AT&T, Facebook
\item Funded by Instrustrial Haskell Group
}
* Part I: Thinking in Haskell
** Take a simple problem and think about the imperative solution
PE 5: What is the smallest number divisible by each of the numbers 1 to 20?
#+BEGIN_LaTeX
\vspace{1cm}
\begin{columns}
\begin{column}{2cm}
\includegraphics[scale=0.15]{res/euler.png}
\end{column}
\begin{column}[c]{8cm}
\begin{lstlisting}[language=C]
lcm_store = 1;
for(i = 1; i <= 20; i ++) {
    lcm_store = lcm (lcm_store, i);
}
\end{lstlisting}
\end{column}
\end{columns}
#+END_LaTeX
\note[itemize]{
\item LCM of all numbers from 1 to 20. LCM of 2 numbers can be calculated at a time. So fold!
}
** Re-think the problem in terms of folds
#+BEGIN_LaTeX
\begin{columns}
\begin{column}{2cm}
\includegraphics[scale=0.25]{res/fold-origami.png}
\end{column}
\begin{column}[c]{8cm}
\begin{lstlisting}[language=Haskell, numbers=none, xleftmargin=0em, frame=none]
foldr :: (a -> b -> b) -> b -> [a] -> b
\end{lstlisting}
\begin{lstlisting}[language=Haskell]
euler5 :: (Integral a) => a
euler5 = foldr lcm 1 [1..20]
    where gcd a 0 = a
          gcd a b = gcd b (a `mod` b)
          lcm a b = (a*b) `div` gcd a b
\end{lstlisting}
\end{column}
\end{columns}
#+END_LaTeX
** Take another problem
What is the first triangle number to have over 500 divisors?
#+BEGIN_LaTeX
\vspace{1cm}
\begin{columns}
\begin{column}{2cm}
\includegraphics[scale=0.15]{res/triangle.png}
\end{column}
\begin{column}[c]{8cm}
\begin{lstlisting}[numbers=none, xleftmargin=0em]
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
\end{lstlisting}
\vspace{1cm}
\begin{lstlisting}[numbers=none, xleftmargin=0em, frame=none]
28 = 2^2 + 7^1
(2+1) * (1+1) = 6 divisors
\end{lstlisting}
\end{column}
\end{columns}
#+END_LaTeX
** How would I solve it in Haskell?
#+BEGIN_LaTeX
\begin{columns}
\begin{column}[b]{5.5cm}
\begin{center}\includegraphics[scale=0.25]{res/filter-funnel.png}\end{center}
\begin{lstlisting}[language=Haskell, numbers=none, xleftmargin=0em, frame=none]
filter :: (a -> Bool) -> [a] -> [a]
\end{lstlisting}
\end{column}
\begin{column}[b]{4.7cm}
\begin{center}\includegraphics[scale=0.25]{res/map.png}\end{center}
\begin{lstlisting}[language=Haskell, numbers=none, xleftmargin=0em, frame=none]
map :: (a -> b) -> [a] -> [b]
\end{lstlisting}
\end{column}
\end{columns}
\begin{lstlisting}[language=Haskell]
euler12 :: (Integral a) => a
euler12 = head $ filter ((> 500) . n_divisors) triangleSeries
    where triangleSeries = [div (n * (n + 1)) 2 | n <- [1..]]
          n_divisors n = product . map ((+1) . length) . primeGroups $ n
	  primeGroups = group . (primeFactors n) . filterPrimes
          filterPrimes n = filter (\x -> n `mod` x == 0) primes
\end{lstlisting}
#+END_LaTeX
\note[itemize]{
\item An introduction to top-down programming, graph reduction, filters and maps
}
* Part II: A peek into GHC
** Behind the scenes
#+BEGIN_LaTeX
\begin{columns}
\begin{column}{2cm}
\includegraphics[scale=0.4]{res/scene-curtain.png}
\end{column}
\begin{column}{9cm}
\begin{itemize}
\item Glasgow Haskell Compiler
\item Parse everything into Core Language
\item Use graph reduction
\item Apply optimizations
\item Compile Core Language into native code via GCC
\end{itemize}
\end{column}
\end{columns}
#+END_LaTeX
\note[itemize]{
\item Created by Simon Peyton Jones, Simon Marlow.
\item Goes through C--
}
** What does the Core Language look like?
#+BEGIN_LaTeX
\begin{columns}
\begin{column}{2cm}
\includegraphics[scale=0.4]{res/core-apple.png}
\end{column}
\begin{column}{9cm}
\begin{itemize}
\item Local defintions
\item Lexical closures provided by \hl{let}/ \hl{letrec}
\item \hl{case} for pattern matching
\item Local function definitions (lambda abstractions)
\item Structured data types provided by \hl{Pack}
\end{itemize}
\end{column}
\end{columns}
#+END_LaTeX
\note[itemize]{
\item Evaluating the Core language
\item Building the Core language involves boring grammar parsing
\item where is a clause. let and letrec are expressions
\item lambda abstractions are removed by lambda lifter
}
** Now apply graph reduction
#+BEGIN_LaTeX
\begin{lstlisting}[xleftmargin=0em, numbers=none, frame=none]
square x = x * x ;
main = square (square 3)
\end{lstlisting}
\vspace{1cm}
\includegraphics[scale=0.6]{res/graph-reduction.png}
#+END_LaTeX
\note[itemize]{
\item Template Compiler
}
** Why I should bother with laziness
#+BEGIN_LaTeX
\begin{columns}
\begin{column}{2cm}
\includegraphics[scale=0.4]{res/lazy-sloth.png}
\end{column}
\begin{column}{8cm}
\begin{lstlisting}[language=Haskell, numbers=none, xleftmargin=0em]
euler14 :: Integer
-- Stack overflow!
euler14 = foldl1 (pick_larger chain_length) l
    -- [2, 3 .. 999999]
    where chain_length = length . collatz_chain
\end{lstlisting}
\begin{lstlisting}[language=Haskell, numbers=none, xleftmargin=0em]
euler14 = foldl1 (pick_larger snd) collatzip
    -- [(2,2),(3,8),(4,3),(5,6),(6,9),(7,17)]
    where collatzip = zip l chain_length
\end{lstlisting}
\end{column}
\end{columns}
#+END_LaTeX
\note[itemize]{
\item Lazy evaluation is a modification of outermost-first evaluation which ensures that if a parameter
to a function occurs more than once in the body, then any work done evaluating it is shared between the copies
\item Fortunately, whatever reduction sequence we choose, we will always get the same answer (that is, normal form)
\item Inefficient because of the recursive traversal of the template
}
** Look deeper into the compiler
#+BEGIN_LaTeX
\begin{columns}
\begin{column}{2cm}
\includegraphics[scale=0.4]{res/closer-look.png}
\end{column}
\begin{column}{8cm}
\begin{itemize}
\item G-Machine compiler
\item TIM compiler
\item Parallel G-machine compiler
\item Lambda lifter
\end{itemize}
\end{column}
\end{columns}
#+END_LaTeX
\note[itemize]{Before running the program, translate each supercombinator body to a sequence of instructions which,
when executed, will construct an instance of the supercombinator body}
* Conclusion
** References
#+BEGIN_LaTeX
\nocite{*}
\bibliographystyle{acm}
\bibliography{haskell-internals}
#+END_LaTeX
** Contact information
#+BEGIN_LaTeX
Ramkumar Ramachandra\\
artagnon@gmail.com\\
\url{http://artagnon.com}\\
Indian Institute of Technology, Kharagpur\\
Presentation source available on \url{http://github.com/artagnon/foss.in}
#+END_LaTeX
