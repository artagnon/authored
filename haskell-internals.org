#+LaTeX_CLASS: beamer
#+LaTeX_HEADER: \mode<presentation>
#+LaTeX_HEADER: \usetheme{CambridgeUS}
#+LaTeX_HEADER: \usecolortheme{beaver}
#+LaTeX_HEADER: \setbeameroption{show notes}
#+LaTeX_HEADER: \institute{FOSS.IN/2009}
#+TITLE: Haskell Internals
#+AUTHOR: Ramkumar Ramachandra
#+DATE: 01 December 2009

#+BEGIN_LaTeX
\def\newblock{\hskip .11em plus .33em minus .07em} % Hack to make BibTeX work with LaTeX
#+END_LaTeX

* Language features
** Laziness
#+BEGIN_LaTeX
\begin{lstlisting}[breaklines, language=haskell]
double (double 5)
let x = double 5 in x + x
let x = 5 + 5 in x + x
let x = 10 in x + x
10 + 10
20
\end{lstlisting}
#+END_LaTeX
\note{Lazy evaluation is a modification of outermost-first evaluation which ensures that if a parameter
to a function occurs more than once in the body, then any work done evaluating it is shared between the copies}
** Folds
#+LaTeX: \includegraphics[scale=0.35]{foldl.png}
#+LaTeX: \begin{flushright}\includegraphics[scale=0.35]{foldr.png}\end{flushright}
\note{Most of the time though, you want a right fold, because rather than calling itself immediately, 
what happens is that the function parameter is immediately applied. If for any reason it doesn't 
need its second parameter to generate some of its output, then it's possible that the rest of the
list won't get used. Thus, foldr plays well with laziness and infinite lists. (Obviously in the case
of summing the elements of a list though, this isn't true, so the strict tail recursion works better.)}
** Scans
#+LaTeX: \begin{center}\includegraphics[scale=0.5]{scanl.png}\end{center}
* Diving In
** Project Euler Problem #12
#+BEGIN_LaTeX
\begin{lstlisting}[breaklines, numbers=none]
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th
triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.
Q: What is the value of the first triangle number to have over five hundred divisors?
\end{lstlisting}
#+END_LaTeX
** Solution
#+BEGIN_LaTeX
\begin{lstlisting}[breaklines, language=haskell, numbers=left]
permute :: [a] -> [[a]]
permute [] = [[]]
permute [a, b] = [[a, b], [b, a]]
permute (x:xs) = concat [interpose x list | list <- permute xs]
\end{lstlisting}
#+END_LaTeX
#+BEGIN_LaTeX
\begin{lstlisting}[breaklines, language=haskell, numbers=left]
interpose :: a -> [a] -> [[a]]
interpose x list = iter (length list)
    where iter 0 = [x:list]
          iter n = callWithN n ++ iter (n - 1)
          callWithN n = [(take n list) ++ [x] ++ (drop n list)]
\end{lstlisting}
#+END_LaTeX
\note{Pattern matching, concat, interpose}
** Common Lisp Code
\note{Moo!}

* Core language
** Local defintions
*** let and letrec instead of while
*** let and letrec don't do pattern matching. Only case does that
*** where is a clause. let and letrec are expressions
** Lambda abstractions
*** Removed by lambda lifting
* Code
* Conclusion
** References
#+BEGIN_LaTeX
\nocite{*}
\bibliographystyle{acm}
\bibliography{haskell-internals}
#+END_LaTeX
** Contact information
#+BEGIN_LaTeX
Ramkumar Ramachandra\\
artagnon@gmail.com\\
\url{http://artagnon.com}\\
Indian Institute of Technology, Kharagpur\\
Presentation source available on \url{http://github.com/artagnon/foss.in}
#+END_LaTeX
